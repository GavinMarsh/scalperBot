ToDo:


----- working settings
public class Settings{

    // Class variables
    private static boolean active = true; //is the bot active.
    private static boolean sleep = false; //is the bot asleep.
    private static String symbol = "XBT-USD"; //user defined symbol.
    private static int fixedQty = 0; //user defined fixed order quantity.
    private static int buyQty = 0; //user defined buy order quantity.
    private static int sellQty = 0; //user defined sell order quantity.

    /**
     * Getter Method for Bot activation.
     */
    public static boolean getActive() {
        return active;
    }

    /**
     * Setter Method for Bot activation.
     */
    public static void setActive(boolean userActivate) {
        active = userActivate;
    }

    /**
     * Getter Method for Bot sleep.
     */
    public static boolean getSleep() {
        return sleep;
    }

    /**
     * Setter Method for Bot sleep.
     */
    public static void setSleep(boolean userSleep) {
        sleep = userSleep;
    }

    /**
     * Getter Method for Symbol to trade.
     */
    public static String getSymbol() {
        return symbol;
    }

    /**
     * Setter Method for Symbol to trade.
     */
    public static void setSymbol(String userSymbol) {
        symbol = userSymbol;
    }

    /**
     * Getter Method for fixed order quantity.
     */
    public static int getFixedQty() {
        return fixedQty;
    }

    /**
     * Setter Method for order size.
     */
    public static void setFixedQty(Integer userFixedQty) {
        fixedQty = userFixedQty;
    }

    /**
     * Getter Method for buy order quantity.
     */
    public static int getBuyQty() {
        return buyQty;
    }

    /**
     * Setter Method for buy order quantity.
     */
    public static void setBuyQty(Integer userBuyQty) {
        buyQty = userBuyQty;
    }

    /**
     * Getter Method for sell order quantity.
     */
    public static int getSellQty() {
        return sellQty;
    }

    /**
     * Setter Method for sell order quantity.
     */
    public static void setSellQty(Integer userSellQty) {
        sellQty = userSellQty;
    }
import static java.lang.Math.toIntExact;

public class Settings {
    public static void command() {
    }
}

        Bot settings = new Bot();
        String answer = "\uD83E\uDD16 These are your current settings\n" +
                "\n" +
                "Contract = " +
                Bot.getContract() + "\n" +
                "Buy order size = " +
                Bot.getPositionSizeBuy() +
                "\n" +
                "Sell order size = " +
                Bot.getPositionSizeSell() + "\n" +
                "\n" +
                "Bot Trading = *Yes*\n";

        EditMessageText new_message = new EditMessageText()
                .enableMarkdown(true)
                .setChatId(Bot.getChatId())
                .setMessageId(toIntExact(Bot.getCbMessageId()))
                .setText(answer);
        try {
            settings.execute(new_message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}

---------------------------------------


------------------------------------------------------------

complete one help option at a time

    /activate/de-activate button under start/settings dependant on if bot is active
    - heartbeat thread

    /setcontract - add two more perp contracts
    /setbuy
    /setsell

give to friends/family to test

- code order engine in java (speak with Victor to see if he wants to help)

    /cancelorders
    /positions - open positions
    /orders - open orders

MVP ----------------------------------------------
    /leverage - show account leverage
    /marginbox
    /margin
    /balance - show account balance
    /pnl - show unrealised pnl
    /accountmargin - show account margin

    /sleep


-----------------------------------------------------------------

- purchase GitHub professional to hide code.

---------------Further Development-----------------------------
- Complete user functionality using inline buttons.
    - user defined order size
    - stop/start bot (could this be done with the usual /start /stop ?)
    - current price/open orders/pending orders.
    - inline button Price / Open Positions / Active Orders
    - inline button to exit all open positions by market order.
      	    - option to exit all by limit order.
      	    - option to exit individual orders.	
    
    
    

------------------Helpers---------------------------------------------

---------------------print to terminal-------------------------------
System.out.print("app got to ?");

Bot is an extension of this tutorial
    https://codegym.cc/groups/posts/telegram-bot-in-java
    
How to call python from java
    https://www.baeldung.com/java-working-with-python

Terminal helpers:
bot details
  curl -s https://api.telegram.org/bot<token>/getMe

get messages
  curl -s https://api.telegram.org/bot<token>/getUpdates
  
  
--------------------------Pseudo code-------------------------------------

version_1.0
User:
	Inputs settings into TRDR and activates Telegram alert signal.

Platform:
	TRDR sends alert to Telegram channel ID:TRDR.io.

Scalper-telegram-bot:
	Heartbeat()
	send message to scalper-telegram-bot "server-running"
		sleep 60min

- Sends signals to Scalper-app.

Scalper-app:
	//variables	
	tradeCounter = 0
	tradeDirection = null
	newMessage = false
	orderConfirmation = false
	
	//methods
	void checkForMessage

		If newMessage = true && tradeCounter <= 4
			tradeDirection = direction in Scalper-telegram-bot
			Enter Bitmex limit-order (current mark), take-profit-limit-order ($25 from mark), direction = tradeDirection.
			
			if order confirmation = true
				tradeCounter ++
			
				if tradeCounter = 5
					sleep for 60min
					tradeCounter = 0
				
			else throw error to log but continue? 
			
		send order confirmation to user && Open Positions / Active Orders

	

				

		

	
